{"version":3,"sources":["constants/index.ts","components/Header/index.tsx","composites/Setup/index.tsx","components/Scoreboard/index.tsx","composites/ResultUpdate/index.tsx","composites/Mahjong/index.tsx","App.tsx","index.tsx"],"names":["SetupFields","ResultUpdateFields","WIN_OPTIONS","ZiMo","FangPao","FangPaoBaoDa","formItemLayout","labelCol","span","wrapperCol","buttonLayout","offset","Setup","props","Form","useForm","form","initialValues","Bet","onFinish","Item","name","PlayerOne","label","rules","required","placeholder","PlayerTwo","PlayerThree","PlayerFour","min","step","formatter","value","replace","type","htmlType","Scoreboard","className","orientation","Object","keys","players","map","ResultUpdate","useState","loserFieldRules","setLoserFieldRules","onUpdateResults","Winner","Group","options","playerNames","optionType","WinType","values","onChange","e","target","Loser","Tai","Mahjong","isSettingUp","setIsSettingUp","bet","setBet","setPlayers","setupValues","newPlayers","player","results","newScore","change","zimoChange","forEach","score","Number","toFixed","baodaChange","App","Header","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fca6ed46.chunk.js","sourcesContent":["export enum SetupFields {\n  PlayerOne = 'Player 1',\n  PlayerTwo = 'Player 2',\n  PlayerThree = 'Player 3',\n  PlayerFour = 'Player 4',\n  Bet = 'Bet'\n}\n\nexport enum ResultUpdateFields {\n  Winner = 'Winner',\n  WinType = 'Win type',\n  Loser = 'Loser',\n  Tai = '台'\n}\n\nexport const WIN_OPTIONS = {\n  ZiMo: '自摸',\n  FangPao: '放炮',\n  FangPaoBaoDa: '放炮包大'\n};","export default (): JSX.Element => <h1>it's mahjong time!</h1>","import React from 'react';\nimport { Form, Input, InputNumber, Button } from 'antd';\nimport { SetupFields } from '../../constants'\n\ninterface SetupProps {\n  onFinish: (values: any) => void;\n}\n\nconst formItemLayout = {\n  labelCol: { span: 3 },\n  wrapperCol: { span: 8 }\n}\n\nconst buttonLayout = {\n  wrapperCol: { offset: 3 }\n}\n\nconst Setup = (props: SetupProps): JSX.Element => {\n  const [form] = Form.useForm();\n\n  const initialValues: {[key in SetupFields]?: any} = {\n    [SetupFields.Bet]: 0.1\n  }\n  \n  return (\n  <Form form={form} {...formItemLayout} onFinish={props.onFinish} initialValues={initialValues}>\n    <Form.Item name={SetupFields.PlayerOne} label={SetupFields.PlayerOne} rules={[{ required: true }]}>\n      <Input placeholder={SetupFields.PlayerOne} />\n    </Form.Item>\n\n    <Form.Item name={SetupFields.PlayerTwo} label={SetupFields.PlayerTwo} rules={[{ required: true }]}>\n      <Input placeholder={SetupFields.PlayerTwo} />\n    </Form.Item>\n\n    <Form.Item name={SetupFields.PlayerThree} label={SetupFields.PlayerThree} rules={[{ required: true }]}>\n      <Input placeholder={SetupFields.PlayerThree} />\n    </Form.Item>\n\n    <Form.Item name={SetupFields.PlayerFour} label={SetupFields.PlayerFour} rules={[{ required: true }]}>\n      <Input placeholder={SetupFields.PlayerFour} />\n    </Form.Item>\n\n    <Form.Item name={SetupFields.Bet} label={SetupFields.Bet}>\n      <InputNumber\n        min={0.1}\n        step={0.1}\n        placeholder={SetupFields.Bet}\n        formatter={(value) => `$${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n      />\n    </Form.Item>\n\n    <Form.Item {...buttonLayout}>\n      <Button type='primary' htmlType='submit'>Start</Button>\n    </Form.Item>\n  </Form>\n  );\n}\n\nexport default Setup;","import React from 'react';\nimport { Divider } from 'antd';\n\ninterface ScoreboardProps {\n  players: { [key: string]: number };\n}\n\nconst Scoreboard = (props: ScoreboardProps): JSX.Element => {\n  return (\n    <div className='scoreboard'>\n      <Divider orientation='left' className='scoreboard__header'>Scoreboard</Divider>\n      <div className='scoreboard__players'>\n        {Object.keys(props.players).map((name: string) => <p className='scoreboard__players-score'>{name}: {props.players[name]}</p>)}\n      </div>\n    </div>\n  );\n}\n\nexport default Scoreboard;","import React, { useState } from 'react';\nimport { Form, Radio, Button, Divider } from 'antd';\nimport { ResultUpdateFields, WIN_OPTIONS } from '../../constants'\n\ninterface ResultUpdateProps {\n  playerNames: string[];\n  onUpdateResults: (values: any) => void;\n}\n\nconst formItemLayout = {\n  labelCol: { span: 3 },\n  wrapperCol: { span: 8 }\n}\n\nconst buttonLayout = {\n  wrapperCol: { offset: 3 }\n}\n\nconst ResultUpdate = (props: ResultUpdateProps): JSX.Element => {\n  const [form] = Form.useForm();\n  const [loserFieldRules, setLoserFieldRules] = useState<[{}]>([{}]);\n\n  const onWinTypeChange = (e: any): void => {\n    if (e.target.value !== WIN_OPTIONS.ZiMo) {\n      setLoserFieldRules([{ required: true }]);\n    } else {\n      setLoserFieldRules([{}]);\n    }\n  }\n\n  return (\n    <div className='update-results'>\n      <Divider orientation='left'>Results</Divider>\n      <Form form={form} {...formItemLayout} onFinish={props.onUpdateResults}>\n        <Form.Item name={ResultUpdateFields.Winner} label={ResultUpdateFields.Winner} rules={[{ required: true }]}>\n          <Radio.Group options={props.playerNames} optionType='button' />\n        </Form.Item>\n\n        <Form.Item name={ResultUpdateFields.WinType} label={ResultUpdateFields.WinType} rules={[{ required: true }]}>\n          <Radio.Group options={Object.values(WIN_OPTIONS)} optionType='button' onChange={onWinTypeChange} />\n        </Form.Item>\n\n        <Form.Item name={ResultUpdateFields.Loser} label={ResultUpdateFields.Loser} rules={loserFieldRules}>\n          <Radio.Group options={props.playerNames} optionType='button' />\n        </Form.Item>\n\n        <Form.Item name={ResultUpdateFields.Tai} label={ResultUpdateFields.Tai} rules={[{ required: true }]}>\n          <Radio.Group options={['1', '2', '3', '4', '5']} optionType='button' />\n        </Form.Item>\n\n        <Form.Item {...buttonLayout}>\n          <Button type='primary' htmlType='submit'>Submit</Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\nexport default ResultUpdate;","import React, { useState } from 'react';\nimport Setup from '../Setup';\nimport Scoreboard from '../../components/Scoreboard';\nimport ResultUpdate from '../ResultUpdate'\nimport { SetupFields, ResultUpdateFields, WIN_OPTIONS } from '../../constants'\n\nconst Mahjong = (): JSX.Element => {\n  const [isSettingUp, setIsSettingUp] = useState<boolean>(true);\n  const [bet, setBet] = useState<number>(0.1);\n  const [players, setPlayers] = useState<{ [key: string]: number }>({});\n\n  const onFinishSetup = (setupValues: { [key: string]: any}): void => {\n    setBet(setupValues[SetupFields.Bet]);\n    delete setupValues[SetupFields.Bet];\n\n    const newPlayers: { [key: string]: number } = {};\n    Object.values(setupValues).map((player: string) => newPlayers[player] = 0);\n    setPlayers(newPlayers);\n    setIsSettingUp(false);\n  }\n\n  const onUpdateResults = (results: any): void => {\n    const newScore: { [key: string]: number } = { ...players };\n    const TAI_TO_SCORE_MAP = [1, 2, 4, 8, 16];\n\n    const change = TAI_TO_SCORE_MAP[results[ResultUpdateFields.Tai] - 1] * bet;\n\n    switch (results[ResultUpdateFields.WinType]) {\n      case WIN_OPTIONS.ZiMo:\n        const zimoChange = change * 2;\n        Object.keys(players).forEach((player: string) => {\n          const score =\n            (player === results[ResultUpdateFields.Winner]) ? newScore[player] + 3 * zimoChange :\n            newScore[player] - zimoChange;\n          newScore[player] = Number(score.toFixed(2));\n        })\n        break;\n      \n      case WIN_OPTIONS.FangPao:\n        Object.keys(players).forEach((player: string) => {\n          const score =\n            (player === results[ResultUpdateFields.Winner]) ? newScore[player] + 4 * change :\n            (player === results[ResultUpdateFields.Loser]) ? newScore[player] - 2 * change :\n            newScore[player] - change;\n          newScore[player] = Number(score.toFixed(2));\n        })\n        break;\n\n      case WIN_OPTIONS.FangPaoBaoDa:\n        const baodaChange = 4 * change;\n        Object.keys(players).forEach((player: string) => {\n          const score =\n            (player === results[ResultUpdateFields.Winner]) ? newScore[player] + baodaChange :\n            (player === results[ResultUpdateFields.Loser]) ? newScore[player] - baodaChange :\n            newScore[player];\n          newScore[player] = Number(score.toFixed(2));\n        })\n        break;\n    }\n\n    setPlayers(newScore);\n  }\n\n  if (isSettingUp) {\n    return <Setup onFinish={onFinishSetup} />\n  }\n\n  return (\n    <div className='mahjong'>\n      <Scoreboard players={players} />\n      <ResultUpdate playerNames={Object.keys(players)} onUpdateResults={onUpdateResults} />\n    </div>\n  );\n}\n\nexport default Mahjong;","import React from 'react';\nimport Header from './components/Header';\nimport Mahjong from './composites/Mahjong'\n\nimport './App.css';\n\nconst App = (): JSX.Element => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Mahjong />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}